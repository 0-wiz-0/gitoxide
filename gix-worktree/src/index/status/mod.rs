use bstr::BStr;

///
pub mod worktree;

///
pub mod index {
    // TODO: index to index diff
}

mod recorder;
pub use recorder::Recorder;

///
pub mod content;

/// How an index entry needs to be changed to obtain the destination state, i.e. `entry.apply(this_change) == other-entry`.
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
pub enum Change<T = ()> {
    /// This corresponding file does not exist in the worktree anymore.
    Removed,
    /// The type of file changed compared to the worktree, i.e. a symlink s now a file.
    Type,
    /// This worktree file was modified in some form, like a permission change or content change or both,
    /// as compared to this entry.
    Modification {
        /// Indicates that one of the stat changes was an executable bit change
        /// which is a significant change itself.
        executable_bit_changed: bool,
        /// The output of the [`CompareBlobs`] run on this entry.
        /// If there is no content change and only the executable bit
        /// changed than this is `None`.
        content_change: Option<T>,
    },
    /// An index entry that correspond to an untracked worktree file marked with `git add`.
    ///
    /// This means it's not available in the git tree yet that the index was created from,
    /// even though now an entry exists that represents the worktree file.
    Added,
}

/// Observe changes by comparing an index entry to the worktree or another index.
pub trait VisitEntry<'index> {
    /// Data generated by comparing an entry with a file.
    type ContentChange;
    /// Observe the `change` of `entry` at the repository-relative `rela_path`, indicating whether
    /// or not it has a `conflict`.
    /// If `change` is `None`, there is no change.
    fn visit_entry(
        &mut self,
        entry: &'index gix_index::Entry,
        rela_path: &'index BStr,
        change: Option<Change<Self::ContentChange>>,
        conflict: bool,
    );
}

/// Compares the content of two blobs in some way.
pub trait CompareBlobs {
    /// Output data produced by [`compare_blobs()`][CompareBlobs::compare_blobs()].
    type Output;

    /// Providing the underlying index `entry`, allow comparing a file in the worktree of size `worktree_blob_size`
    /// and allow reading its bytes using `worktree_blob`.
    /// If this function returns `None` the `entry` and the `worktree_blob` are assumed to be identical.
    /// Use `entry_blob` to obtain the data for the blob referred to by `entry`, allowing comparisons of the data itself.
    fn compare_blobs<'a, E>(
        &mut self,
        entry: &'a gix_index::Entry,
        worktree_blob_size: usize,
        worktree_blob: impl content::ReadDataOnce<'a, E>,
        entry_blob: impl content::ReadDataOnce<'a, E>,
    ) -> Result<Option<Self::Output>, E>;
}
