//! Compute changes that need to be applied to the ! index to obtain a different
//state (either a worktree or a second index). ! Also computes other related
//information like conflicts/added files and provides ! everything necessary
//for `gix diff`/`git status` (when not both arguments are revisions) ! and
//dirtiness checks that are run before commands like `git merge`/`git rebase`

use bstr::BStr;

///
pub mod worktree;

///
pub mod index;

mod recorder;
pub use recorder::Recorder;

///
pub mod content;

/// How an index entry needs to be changed to obtain the destination state
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
pub enum Change<T = ()> {
    /// This index entry has been removed
    Removed,
    /// The type of file changed (for example symlink <=> file) performing
    /// a diff
    Type,
    /// This index entry has been modified in some form (permission change
    /// or content change or both)
    Modification {
        /// Indicates that one of the stat changes was an executable bit change
        /// which is a significant change itself (for git status)
        /// these files don't need to be rechanged
        executable_bit_changed: bool,
        /// The output of the [`ContentComparison`] run on this entry.
        /// if the there is no content change and only the executable bit
        /// changed than this is `None`
        content_change: Option<T>,
    },
    /// An index entry that correspond to an untracked worktree file marked with `git add`
    Added,
}

/// Collects the changes produced by comparing an index entry to
/// the worktree (or another index)
pub trait Collector<'index>: Send {
    /// Data generated by comparing two files/entries
    type ContentChange;
    ///
    fn visit_entry(
        &mut self,
        entry: &'index gix_index::Entry,
        path: &'index BStr,
        status: Option<Change<Self::ContentChange>>,
        conflict: bool,
    );
}

/// Compares the content of two blobs while performing a diff
pub trait ContentComparison: Send + Sync {
    /// Output data produced by this
    type Output;
    /// Compares an index entry to a different blob. The size of the blob
    /// and a lazy handle to read its data (from disk or ODB) is provided. If
    /// this function returns `None` the entry and the blob are assumed to be
    /// identical if this assumption is broken by a faulty implementation then
    /// the index state can be messed up
    fn compare_blob<'a, E>(
        &self,
        entry: &'a gix_index::Entry,
        blob_size: usize,
        blob: impl content::LazyBlob<'a, E>,
        resolve_oid: impl FnMut(gix_hash::ObjectId) -> Result<&'a [u8], E>,
    ) -> Result<Option<Self::Output>, E>;
}
